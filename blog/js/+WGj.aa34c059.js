(window.webpackJsonp=window.webpackJsonp||[]).push([["+WGj"],{"+WGj":function(s,a,t){"use strict";t.r(a);var n={created:function(){}},l=t("psIG"),v=Object(l.a)(n,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"blog-container"},[t("BlogHeader",{attrs:{title:"前端跨域解决方案",subTitle:"",date:"2017-07-12",tags:["Javascript"]}}),s._v(" "),t("BlogContent",{attrs:{useCatalog:!0}},[t("div",{attrs:{slot:"content"},slot:"content"},[t("p",[s._v("\n                这里说的跨域，是指通过js在不同的域之间进行数据传输或通信。"),t("br"),s._v("比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。"),t("br"),t("strong",[s._v("只要协议、域名、端口有任何一个不同，都被当作是不同的域")]),s._v("。"),t("br"),s._v("下面介绍几种实现跨域的解决方案。\n            ")]),s._v(" "),t("h2",[s._v("服务器反向代理")]),s._v(" "),t("p",[s._v("\n                因为服务器之间是不存在跨域问题的，反向代理正是利用了这一点。"),t("br"),s._v("假设，从客户端A访问服务器A时，服务器A上并没有需要的数据，但可以做一层代理去访问服务器B，从而得到想要的数据返回给客户端A，也就实现了客户端A访问服务器B的跨域需求。"),t("br"),s._v("通过 nginx 或 apache 都可以设置反向代理，过程也大同小异，以nginx为例，可以这样配置：\n                "),t("pre",{staticClass:"hljs css"},[t("code",{},[s._v("location ^~ "),t("span",{staticClass:"hljs-regexp"},[s._v("/api/")]),s._v(" {"),t("br"),s._v("    "),t("span",{staticClass:"hljs-comment"},[s._v("// 代理的服务器域名")]),t("br"),s._v("    proxy_pass "),t("span",{staticClass:"hljs-string"},[s._v("http://xxx.xx.com; ")]),t("br"),s._v("}")])]),s._v("\n                对于SPA应用，在开发期间，一般都会在webpack的devServer中配置代理，从本地代理到真正的接口所在的服务器。大致可以这样配置：\n                "),t("pre",{staticClass:"hljs css"},[t("code",{},[t("span",{staticClass:"hljs-selector-tag"},[s._v("devServer")]),s._v(": {"),t("br"),s._v("    "),t("span",{staticClass:"hljs-attribute"},[s._v("proxy")]),s._v(": {"),t("br"),s._v("        "),t("span",{staticClass:"hljs-string"},[s._v("'/api'")]),s._v(": {"),t("br"),s._v("            target: "),t("span",{staticClass:"hljs-string"},[s._v("'http://xxx.xx.com'")]),s._v(","),t("br"),s._v("            changeOrigin: true"),t("br"),s._v("        }"),t("br"),s._v("    },"),t("br"),s._v("}")])])]),s._v(" "),t("h2",[s._v("CORS(跨域源资源共享)")]),s._v(" "),t("p",[s._v("\n                基本思想是使用自定义的HTTP头部，让服务器能声明允许访问的来源。"),t("br"),s._v("\n                使用CORS时，异步请求会被分为简单请求(非Preflight)和非简单请求。\n            ")]),s._v(" "),t("h4",[s._v("简单请求")]),s._v(" "),t("p",[s._v("\n                所有的跨域请求(简单或非简单)总会包含一个origin的请求头部，浏览器会自动添加，用户不用关心，也无法控制。它的值由协议、域名、端口组成，目的是说明请求的来源。比如："),t("br"),s._v(" "),t("code",[s._v("Origin:http://www.hello.com")])]),s._v(" "),t("p",[s._v("\n                服务器接收到这个请求后，会在响应头Access-Control-Allow-Origin回发相同的源信息。( * 表明该资源可以被任意外域访问)。比如："),t("br"),s._v(" "),t("code",[s._v("Access-Control-Allow-Origin: *")])]),s._v(" "),t("h4",[s._v("非简单请求")]),s._v(" "),t("p",[s._v("\n                非简单CORS请求会在正式请求之前发送一次"),t("strong",[s._v("Preflight")]),s._v("请求，得到确认之后才会发送真正的XMLHttpRequest请求。浏览器自动处理这两个请求，并且Preflight请求结束后，结果将按照响应中指定的时间缓存起来。所以，只是第一次发送这种请求时会多一次HTTP请求。\n            ")]),s._v(" "),t("p",[s._v("\n                Preflight请求使用"),t("code",[s._v("OPTIONS")]),s._v("方法,发送下列头部：\n                "),t("pre",{staticClass:"hljs oxygene"},[t("code",{},[s._v("Origin: 与简单请求相同"),t("br"),s._v("Access-Control-Request-"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("Method")]),s._v(":")]),s._v(" 请求自身使用的方法")])]),s._v("\n                如果服务器接受带凭据(cookie、HTTP认证、客户端SSL证明等)的请求，就会用到下面的HTTP头部响应："),t("br"),s._v(" "),t("code",[s._v("Access-Control-Allow-Credentials: true")])]),s._v(" "),t("p",[s._v("\n                虽然这种方法配置也挺简单的，但对SPA应用来说，每个页面重复调用同一个接口的概率很小，也就意味着，每个接口必然会发2次请求，先是OPTIONS校验，然后才是真正的请求。\n            ")]),s._v(" "),t("p",[t("strong",[s._v("所以，个人感觉，从前端的性能优化上考虑，反向代理会更加友好。")])]),s._v(" "),t("h2",[s._v("JSONP(JSON with padding)")]),s._v(" "),t("p",[s._v("\n                在js中，我们无法直接用XMLHttpRequest请求不同域上的数据。但在页面中，引入不同域上的js脚本文件，却是可以的。jsonp正是利用这个特性来实现的。"),t("br"),s._v("\n                JSONP由两部分组成：回调函数 + 数据。回调函数是当有数据返回时，可以通过js调用的函数。数据就是传入回调函数的JSON数据。"),t("br"),s._v("\n                JSONP是通过动态加载一个"),t("code",[s._v("<script>")]),s._v("元素，而其src属性指定一个"),t("code",[s._v("跨域的URL")]),s._v("来实现的。\n            ")]),s._v(" "),t("p",[s._v("\n                假设有一个a.html页面，它要获取一份不同域上的json数据，比如json数据的地址是"),t("code",[s._v("http://www.hello.com/data.php")]),s._v("，那么在a.html中的js代码可以这么写：\n                "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"actionscript"}),t("br"),t("span",{staticClass:"actionscript"},[s._v("    "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("doSomething")]),s._v(" "),t("span",{staticClass:"hljs-params"},[s._v("(data)")]),s._v(" ")]),s._v("{")]),t("br"),t("span",{staticClass:"actionscript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 处理异步返回的data")])]),t("br"),t("span",{staticClass:"actionscript"},[s._v("    }")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("br"),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("src")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"http://www.hello.com/data.php?callback=doSometing"')]),s._v(">")]),t("span",{staticClass:"undefined"}),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")])])]),s._v("\n                上例中，"),t("strong",[s._v("callback")]),s._v("这个参数名只是按习惯这么取，也可是是其他的。"),t("br"),s._v("\n                因为是当做一个js文件来引入的，所以"),t("code",[s._v("http://www.hello.com/data.php")]),s._v("返回的必须是一个能执行的js文件，所以这个页面的php代码可能是这样的:\n                "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"php"},[t("span",{staticClass:"hljs-meta"},[s._v("<?php")])]),t("br"),t("span",{staticClass:"php"},[s._v("    $callback = $_GET["),t("span",{staticClass:"hljs-string"},[s._v("'callback'")]),s._v("]; "),t("span",{staticClass:"hljs-comment"},[s._v("// 得到函数名")])]),t("br"),t("span",{staticClass:"php"},[s._v("    $data = "),t("span",{staticClass:"hljs-keyword"},[s._v("array")]),s._v("("),t("span",{staticClass:"hljs-string"},[s._v("'a'")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'b'")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'c'")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 模拟要返回的json数据")])]),t("br"),t("span",{staticClass:"php"},[s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("echo")]),s._v(" $callback."),t("span",{staticClass:"hljs-string"},[s._v("'('")]),s._v(".json_encode($data)."),t("span",{staticClass:"hljs-string"},[s._v("')'")]),s._v("; ")]),t("br"),t("span",{staticClass:"php"},[t("span",{staticClass:"hljs-meta"},[s._v("?>")])])])]),s._v("\n                最终，在a.html中，"),t("code",[s._v("doSomething")]),s._v("的参数就能得到"),t("code",[s._v("['a', 'b', 'c']")])]),s._v(" "),t("p",[s._v("\n                在jquery中，操作jsonp更为方便。"),t("br"),s._v(" "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"javascript"}),t("br"),t("span",{staticClass:"javascript"},[s._v("    $.getJSON("),t("span",{staticClass:"hljs-string"},[s._v("'http://www.hello.com/data.php?callback=?'")]),s._v(", "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("data")]),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 处理异步返回的data")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("    });")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")])])]),s._v("\n                原理是一样的，只不过我们不需要手动的插入script标签以及定义回掉函数。jquery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。\n            ")]),s._v(" "),t("h2",[s._v("通过document.domain来跨子域")]),s._v(" "),t("p",[s._v("\n                浏览器的同源策略规定，无法请求不同源中的文档，还有同一个浏览器中不同框架也不能进行js的交互操作。有一点需要说明，不同的框架之间(父子或同辈)，是能够获取到彼此的window对象的，但却无法使用。\n            ")]),s._v(" "),t("p",[s._v("\n                比如，有一个页面，它的地址是"),t("code",[s._v("http://www.example.com/a.html")]),s._v("，在这个页面里面有一个iframe，它的src是"),t("code",[s._v("http://example.com/b.html")]),s._v(", 很显然，这个页面与它里面的iframe框架是不同域的，所以我们无法在页面中通过js代码，来获取iframe中的东西：\n                "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"javascript"}),t("br"),t("span",{staticClass:"javascript"},[s._v("    "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("onLoad")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" iframe = "),t("span",{staticClass:"hljs-built_in"},[s._v("document")]),s._v(".getElementById("),t("span",{staticClass:"hljs-string"},[s._v("'iframe'")]),s._v(");")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 这里可以获取到iframe的window对象，但几乎没法用")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" win = iframe.contentWindow;")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 这里是获取不到iframe的document对象的")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" doc = win.document;")]),t("br"),t("span",{staticClass:"javascript"},[s._v("    }")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("br"),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"iframe"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("src")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"http://example.com/b.html"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("onload")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"onLoad()"')]),s._v(">")]),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(">")])])])]),s._v(" "),t("p",[s._v("\n                这个时候，"),t("strong",[s._v("document.domain")]),s._v(" 就可以派上用场了，我们只要把"),t("code",[s._v("http://www.example.com/a.html")]),s._v(" 和 "),t("code",[s._v("http://example.com/b.html")]),s._v(" 这两个页面的 document.domain 都设成相同的域名就可以了。"),t("br"),s._v("\n                但要注意的是，document.domain 的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。\n            ")]),s._v(" "),t("p",[s._v("\n                例如：a.b.example.com 中某个文档的document.domain 可以设成a.b.example.com、b.example.com 、example.com中的任意一个，但是不可以设成 c.a.b.example.com，因为这是当前域的子域，也不可以设成 baidu.com，因为主域已经不相同了。\n            ")]),s._v(" "),t("p",[s._v("\n                所以，在页面 "),t("strong",[s._v("http://www.example.com/a.html")]),s._v(" 中设置 "),t("code",[s._v("document.domain = 'example.com';")]),s._v("。然后，在页面 "),t("strong",[s._v("http://example.com/b.html")]),s._v(" 中也设置"),t("code",[s._v("document.domain = 'example.com';")]),s._v("。 最后，在a.html中调用 "),t("code",[s._v("onLoad()")]),s._v(" 方法，就能获取到iframe中的各种属性和对象了。\n            ")]),s._v(" "),t("p",[s._v("\n                不过，如果你想在"),t("strong",[s._v("http://www.example.com/a.html")]),s._v(" 页面中通过 ajax 直接请求 "),t("strong",[s._v("http://example.com/b.html")]),s._v(" 页面，即使你设置了相同的 document.domain 也还是不行的，它只适用于不同子域的框架间的交互。\n            ")]),s._v(" "),t("h2",[s._v("window.name")]),s._v(" "),t("p",[s._v("\n                window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。\n            ")]),s._v(" "),t("p",[s._v("\n                接下来，通过一个例子来理解如何通过window.name进行跨域。"),t("br"),s._v("\n                假设，有一个 "),t("code",[s._v("www.example.com/a.html")]),s._v(" 页面，需要通过 a.html 页面里的js来获取另一个位于不同域上的页面 "),t("code",[s._v("www.xxx.com/data.html")]),s._v(" 里的数据。\n            ")]),s._v(" "),t("p",[s._v("\n                data.html 页面里的代码很简单，就是给当前的 window.name 设置一个 a.html 页面想要得到的数据值，只要是字符串就行，当然对于json数据来说，需要通过 JSON.stringify() 方法转成字符串即可。\n            ")]),s._v(" "),t("p",[s._v("\n                那么在a.html页面中，我们怎么把data.html页面载入进来呢？显然我们不能直接在 a.html 页面中通过改变 window.location 来载入 data.html 页面，因为我们想要即使 a.html 页面不跳转也能得到 data.html 里的数据。答案就是在 a.html 页面中使用一个隐藏的iframe来充当一个中间人角色，由iframe去获取 data.html 的数据，然后a.html 再去得到iframe获取到的数据。\n            ")]),s._v(" "),t("p",[s._v("\n                充当中间人的iframe想要获取到 data.html 的通过 window.name 设置的数据，只需要把这个iframe的src设为 www.xxx.com/data.html 就行了。然后 a.html 想要得到iframe所获取到的数据，也就是想要得到iframe的 window.name 的值，还必须把这个iframe的src设成跟 a.html 页面同一个域才行，不然根据前面讲的同源策略，a.html 是不能访问到iframe里的 window.name 属性的。\n            ")]),s._v(" "),t("p",[s._v("\n                a.html页面的代码，可以是这样的：\n                "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"javascript"}),t("br"),t("span",{staticClass:"javascript"},[s._v("    "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("getData")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" iframe = "),t("span",{staticClass:"hljs-built_in"},[s._v("document")]),s._v(".getElementById("),t("span",{staticClass:"hljs-string"},[s._v("'iframe'")]),s._v(");")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 这里的b.html名字随意，只要是跟a.html同域下的即可")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("        iframe.src = "),t("span",{staticClass:"hljs-string"},[s._v("'b.html'")]),s._v(";")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        iframe.onload = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("            "),t("span",{staticClass:"hljs-comment"},[s._v("// 获取iframe里的window的name属性，也就是得到了data.html中设置的数据")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("            "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" data = iframe.contentWindow.name;")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        }")]),t("br"),t("span",{staticClass:"javascript"},[s._v("    }")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("br"),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"iframe"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("src")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"http://www.xxx.com/data.html"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("onload")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"getData()"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("style")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"display:none;"')]),s._v(">")]),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(">")])])])]),s._v(" "),t("p",[s._v("\n                上面的代码只是最简单的原理演示代码，当然为了安全，获取完数据后，还可以销毁作为代理的iframe。\n            ")]),s._v(" "),t("h2",[s._v("HTML5的window.postMessage")]),s._v(" "),t("p",[s._v("\n                window.postMessage(message, targetOrigin) 方法是 html5 新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源。\n            ")]),s._v(" "),t("p",[s._v("\n                需要注意的是，postMessage的调用者window指的是接收消息的一方，该方法的第一个参数 message 是指需要发送的数据(只能为字符串)，第二个参数 targetOrigin 用来限定接收方所在的域，如果不想限定域，可以使用通配符 * 。\n            ")]),s._v(" "),t("p",[s._v("\n                消息接收方的window，可以通过 "),t("strong",[s._v("onMessage")]),s._v(" 事件来获取传入的消息，消息内容储存在该事件对象的data属性中。\n            ")]),s._v(" "),t("p",[s._v("\n                下面看一个简单的示例：\n                "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-comment"},[s._v("\x3c!-- 这是页面 http://example.com/a.html 的代码 --\x3e")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"javascript"}),t("br"),t("span",{staticClass:"javascript"},[s._v("    "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("onLoad")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" iframe = "),t("span",{staticClass:"hljs-built_in"},[s._v("document")]),s._v(".getElementById("),t("span",{staticClass:"hljs-string"},[s._v("'iframe'")]),s._v(");")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" win = iframe.contentWindow;")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        win.postMessage("),t("span",{staticClass:"hljs-string"},[s._v("'这是来自页面a.html的测试数据'")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'*'")]),s._v(");")]),t("br"),t("span",{staticClass:"javascript"},[s._v("    }")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("br"),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("id")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"iframe"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("src")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"http://www.example.com/b.html"')]),s._v(" "),t("span",{staticClass:"hljs-attr"},[s._v("onload")]),s._v("="),t("span",{staticClass:"hljs-string"},[s._v('"onLoad()"')]),s._v(">")]),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("iframe")]),s._v(">")])])]),s._v(" "),t("pre",{staticClass:"hljs xml"},[t("code",{},[t("span",{staticClass:"hljs-comment"},[s._v("\x3c!-- 这是页面 http://www.example.com/b.html 的代码 --\x3e")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("<"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")]),t("span",{staticClass:"javascript"}),t("br"),t("span",{staticClass:"javascript"},[s._v("    "),t("span",{staticClass:"hljs-comment"},[s._v("// 注册mesaage事件接收消息")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("    "),t("span",{staticClass:"hljs-built_in"},[s._v("window")]),s._v(".onMessage = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("e")]),s._v(") ")]),s._v("{")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" e = e || event;")]),t("br"),t("span",{staticClass:"javascript"},[s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 通过data属性得到传送的消息")])]),t("br"),t("span",{staticClass:"javascript"},[s._v("        alert(e.data);")]),t("br"),t("span",{staticClass:"javascript"},[s._v("    }")]),t("br"),t("span",{staticClass:"hljs-tag"},[s._v("</"),t("span",{staticClass:"hljs-name"},[s._v("script")]),s._v(">")])])])]),s._v(" "),t("p",[s._v("\n                使用postMessage来跨域传送数据还是比较直观和方便的，只是浏览器兼容是道坎，ie9及以下不支持。\n            ")])])])],1)},[],!1,null,null,null);v.options.__file="cross-domain-in-javascript.vue";a.default=v.exports}}]);