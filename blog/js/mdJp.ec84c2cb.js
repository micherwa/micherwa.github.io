(window.webpackJsonp=window.webpackJsonp||[]).push([["mdJp"],{mdJp:function(s,a,t){"use strict";t.r(a);var n={created:function(){}},v=t("psIG"),_=Object(v.a)(n,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"blog-container"},[t("BlogHeader",{attrs:{title:"函数的柯里化",subTitle:"",date:"2017-08-30",tags:["JavaScript"]}}),s._v(" "),t("BlogContent",{attrs:{useCatalog:!0}},[t("div",{attrs:{slot:"content"},slot:"content"},[t("blockquote",[t("p",[s._v("\n                    本文将介绍Javascript中函数柯里化的应用，柯里化是函数式编程的一个重要概念。它既能减少代码冗余，也能增加可读性，更关键的是，还能用来装逼。\n                ")])]),s._v(" "),t("h2",[s._v("柯里化的定义")]),s._v(" "),t("p",[s._v("\n                在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n            ")]),s._v(" "),t("h2",[s._v("什么是柯里化")]),s._v(" "),t("p",[s._v("\n                柯里化的定义，理解起来有点费劲。为了更好地理解，先看下面这个例子：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("sum")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("a, b, c")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a + b + c);"),t("br"),s._v("}"),t("br"),s._v("sum("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 6")])])]),s._v("\n                毫无疑问，sum是个简单的累加函数，接受3个参数，输出累加的结果。\n            ")]),s._v(" "),t("p",[s._v("\n                假设有这样的需求，sum的前2个参数保持不变，最后一个参数可以随意。那么就会想到，在函数内，是否可以把前2个参数的相加过程，给抽离出来，因为参数都是相同的，没必要每次都做运算。\n            ")]),s._v(" "),t("p",[s._v("\n                如果先不管函数内的具体实现，调用的写法可以是这样："),t("code",[s._v("sum(1, 2)(3);")]),s._v("或这样"),t("code",[s._v("sum(1, 2)(10);")]),s._v("。就是，先把前2个参数的运算结果拿到后，再与第3个参数相加。\n            ")]),s._v(" "),t("p",[s._v("\n                这其实就是函数柯里化的简单应用。\n            ")]),s._v(" "),t("h2",[s._v("柯里化的实现")]),s._v(" "),t("p",[t("code",[s._v("sum(1, 2)(3);")]),s._v("这样的写法，并不常见。拆开来看，"),t("code",[s._v("sum(1, 2)")]),s._v("返回的应该还是个函数，因为后面还有"),t("code",[s._v("(3)")]),s._v("需要执行。\n            ")]),s._v(" "),t("p",[s._v("\n                那么反过来，从最后一个参数，从右往左看，它的左侧必然是一个函数。以此类推，如果前面有n个()，那就是有n个函数返回了结果，只是返回的结果，还是一个函数。是不是有点递归的意思？\n            ")]),s._v(" "),t("p",[s._v("\n                网上有一些不同的柯里化的实现方式，以下是个人觉得最容易理解的写法：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("curry")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("fn, currArgs")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" args = [].slice.call("),t("span",{staticClass:"hljs-built_in"},[s._v("arguments")]),s._v(");"),t("br"),t("br"),s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 首次调用时，若未提供最后一个参数currArgs，则不用进行args的拼接")]),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (currArgs !== "),t("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v(") {"),t("br"),s._v("            args = args.concat(currArgs);"),t("br"),s._v("        }"),t("br"),t("br"),s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 递归调用")]),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (args.length < fn.length) {"),t("br"),s._v("            "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" curry(fn, args);"),t("br"),s._v("        }"),t("br"),t("br"),s._v("        "),t("span",{staticClass:"hljs-comment"},[s._v("// 递归出口")]),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" fn.apply("),t("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(", args);"),t("br"),s._v("    }"),t("br"),s._v("}")])])]),s._v(" "),t("p",[s._v("\n                curry函数有2个参数，fn 指的就是本文一开始的源处理函数"),t("code",[s._v("sum")]),s._v("。currArgs 是调用curry时传入的参数列表，比如"),t("code",[s._v("(1, 2)(3)")]),s._v("这样的。\n            ")]),s._v(" "),t("p",[s._v("\n                再看到curry函数内部，它会整个返回一个匿名函数。\n            ")]),s._v(" "),t("p",[s._v("\n                再接下来的"),t("code",[s._v("let args = [].slice.call(arguments);")]),s._v("，意思是将 arguments 数组化。arguments 是一个类数组的结构，它并不是一个真的数组，所以没法使用数组的方法。我们用了 call 的方法，就能愉快地对 args 使用数组的原生方法了。call 的具体用法，可以参考\n                "),t("router-link",{attrs:{to:{name:"call-and-apply-and-bind"}}},[s._v("这篇文章")]),s._v("。\n            ")],1),s._v(" "),t("p",[t("code",[s._v("currArgs !== undefined")]),s._v("的判断，是为了解决递归调用时的参数拼接。\n            ")]),s._v(" "),t("p",[s._v("\n                最后，判断 args 的个数，是否与 fn (也就是 sum )的参数个数相等，相等了就可以把参数都传给 fn，进行输出；否则，继续递归调用，直到两者相等。\n            ")]),s._v(" "),t("p",[s._v("\n                测试一下：\n                "),t("pre",{staticClass:"hljs lsl"},[t("code",{},[s._v("function sum(a, b, c) {"),t("br"),s._v("    console.log(a + b + c);"),t("br"),s._v("}"),t("br"),t("br"),s._v("const fn = curry(sum);"),t("br"),t("br"),s._v("fn("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 6")]),t("br"),s._v("fn("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(")("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 6")]),t("br"),s._v("fn("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(")("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 6")]),t("br"),s._v("fn("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(")("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(")("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("); "),t("span",{staticClass:"hljs-comment"},[s._v("// 6")])])]),s._v("\n                都能输出6。\n            ")]),s._v(" "),t("h2",[s._v("柯里化的目的")]),s._v(" "),t("p",[s._v("\n                柯里化的目的是为了减少代码冗余，以及增加代码的可读性。比如下面这个更简单的例子：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" persons = [{"),t("span",{staticClass:"hljs-attr"},[s._v("name")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'kevin'")]),s._v(", "),t("span",{staticClass:"hljs-attr"},[s._v("age")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("11")]),s._v("}, {"),t("span",{staticClass:"hljs-attr"},[s._v("name")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'daisy'")]),s._v(", "),t("span",{staticClass:"hljs-attr"},[s._v("age")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("24")]),s._v("}];"),t("br"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" getProp = _.curry("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("key, obj")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" obj[key];"),t("br"),s._v("});"),t("br"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" names2 = persons.map(getProp("),t("span",{staticClass:"hljs-string"},[s._v("'name'")]),s._v("));"),t("br"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(names2); "),t("span",{staticClass:"hljs-comment"},[s._v("// ['kevin', 'daisy']")]),t("br"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" ages2 = persons.map(getProp("),t("span",{staticClass:"hljs-string"},[s._v("'age'")]),s._v("));"),t("br"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(ages2); "),t("span",{staticClass:"hljs-comment"},[s._v("// [11, 24]")])])])]),s._v(" "),t("p",[s._v("\n                看另一个Memoization的例子：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("memoizeFunction")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("func")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" cache = {};"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" key = "),t("span",{staticClass:"hljs-built_in"},[s._v("arguments")]),s._v("["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("];"),t("br"),s._v("        "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (cache[key]) {"),t("br"),s._v("            "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" cache[key];"),t("br"),s._v("        } "),t("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {"),t("br"),s._v("            "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" val = func.apply("),t("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(", "),t("span",{staticClass:"hljs-built_in"},[s._v("arguments")]),s._v(");"),t("br"),s._v("            cache[key] = val;"),t("br"),s._v("            "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" val;"),t("br"),s._v("        }"),t("br"),s._v("    };"),t("br"),s._v("}"),t("br"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" fibonacci = memoizeFunction("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("n")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" (n === "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" || n === "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(") ? n : fibonacci(n - "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(") + fibonacci(n - "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");"),t("br"),s._v("});"),t("br"),t("br"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(fibonacci("),t("span",{staticClass:"hljs-number"},[s._v("100")]),s._v(")); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出354224848179262000000")]),t("br"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(fibonacci("),t("span",{staticClass:"hljs-number"},[s._v("100")]),s._v(")); "),t("span",{staticClass:"hljs-comment"},[s._v("// 输出354224848179262000000")])])]),s._v("\n                代码中，第2次计算 fibonacci(100) 则只需要在内存中直接读取结果。\n            ")]),s._v(" "),t("p",[s._v("\n                Memoization 用于优化比较耗时的计算，通过将计算结果缓存到内存中，这样对于同样的输入值，下次只需要中内存中读取结果。\n            ")]),s._v(" "),t("h2",[s._v("总结")]),s._v(" "),t("p",[s._v("\n                实现柯里化的方式，基本都需要根据参数以及递归方式，让我们通过拆分参数的方式，来调用一个多参数的函数方法。\n            ")]),s._v(" "),t("p",[s._v("\n                虽然一开始理解起来有点云里雾里的，但一旦理解了其中的含义和具体的使用场景，你一定会对它爱不释手的。\n            ")])])])],1)},[],!1,null,null,null);_.options.__file="curry-function.vue";a.default=_.exports}}]);