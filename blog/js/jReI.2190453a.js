(window.webpackJsonp=window.webpackJsonp||[]).push([["jReI"],{jReI:function(s,a,t){"use strict";t.r(a);var l={},n=t("psIG"),v=Object(n.a)(l,function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{staticClass:"blog-container"},[t("BlogHeader"),s._v(" "),t("BlogContent",{attrs:{useCatalog:!0}},[t("div",{attrs:{slot:"content"},slot:"content"},[t("blockquote",[t("p",[s._v("\n                    call 和 apply 在平时的工作中并不常用，突然遇到的时候，又要回顾一下才能转过弯来。所以这回，就好好地探究一下这两个方法的区别，以及一些妙用。另外，还会介绍与之类似的bind。\n                ")])]),s._v(" "),t("h2",[s._v("基本作用")]),s._v(" "),t("p",[s._v("\n                call 和 apply 这两个方法的基本作用，就是为了"),t("strong",[s._v("改变对象的执行上下文")]),s._v("。\n            ")]),s._v(" "),t("h4",[s._v("什么是执行上下文？")]),s._v(" "),t("p",[s._v("\n                我们在写一个方法的时候，经常会用到this这个关键字，它表示的就是这个方法的执行上下文，也叫执行环境。关于this的具体理解，可参考 "),t("router-link",{attrs:{to:{name:"how-to-use-this-in-javascript"}}},[s._v("这篇文章")]),s._v("。它的总原则是，"),t("strong",[s._v("this永远指向它的调用者")]),s._v("。\n            ")],1),s._v(" "),t("h4",[s._v("为何要改变执行上下文？")]),s._v(" "),t("p",[s._v("\n                举一个生活中的小例子：平时懒得下厨房的我，今天突然想自己煲汤喝，但是没有适合的锅，而我又不想出去买。所以就问邻居借了一个锅来煲汤，这样既达到了目的，又节省了开支，一举两得。\n            ")]),s._v(" "),t("p",[s._v("\n                改变执行上下文也是一样的，A对象有一个方法，而B对象因为某种原因，也需要用到同一样的方法，那么这时候我们是单独为B扩展个方法呢，还是借用一下A的方法呢？当然是借用A的啦，既完成了需求，又减少了内存的占用。\n            ")]),s._v(" "),t("h2",[s._v("call 和 apply 的异同")]),s._v(" "),t("p",[s._v("\n                了解异同点之前，先看这两个方法是如何使用的\n            ")]),s._v(" "),t("h4",[s._v("基本使用")]),s._v(" "),t("p",[t("code",[s._v("Function.call(obj,[param1[,param2[,…[,paramN]]]])")]),s._v(" "),t("ul",[t("li",[s._v("\n                        调用call的对象必须是个函数Function\n                    ")]),s._v(" "),t("li",[s._v("\n                        call的第一个参数将会是function改变上下文后指向的对象，如果不传，将会默认是全局对象window\n                    ")]),s._v(" "),t("li",[s._v("\n                        第二个参数开始可以接收任意个参数，这些参数将会作为function的参数传入Function\n                    ")])])]),s._v(" "),t("p",[t("code",[s._v("Function.apply(obj[,argArray])")]),t("br"),s._v("\n                与call方法的使用基本一致，但是只接收两个参数，其中第二个参数必须是一个数组或者类数组，这也是这两个方法很重要的一个区别\n            ")]),s._v(" "),t("h5",[s._v("数组与类数组的关系")]),s._v(" "),t("p",[s._v("\n                数组我们都熟悉，它的特征有：可以通过角标调用，如 array[0]；具有长度属性length；可以通过 for 循环和forEach方法进行遍历。\n            ")]),s._v(" "),t("p",[s._v("\n                类数组顾名思义，具备的特征应该与数组基本相同，那么可以知道，一个形如下面这个对象的对象就是一个类数组。\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-attribute"},[s._v("let arrayLike")]),s._v(" = {"),t("br"),s._v("    0: 1,"),t("br"),s._v("    1: 2,"),t("br"),s._v("    2: 3,"),t("br"),s._v("    length: 3"),t("br"),s._v("};")])])]),s._v(" "),t("p",[s._v("\n                类数组arrayLike可以通过角标进行调用，具有length属性，同时也可以通过 for 循环进行遍历。我们经常使用的获取dom节点的方法返回的就是一个类数组，在一个方法中使用 arguments 关键字获取到的该方法的所有参数也是一个类数组。\n            ")]),s._v(" "),t("p",[s._v("\n                但是类数组却不能通过forEach进行遍历，因为forEach是数组原型链上的方法，类数组毕竟不是数组，所以无法使用。但我们可以这么做：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{staticStyle:{"word-break":"break-word","white-space":"initial"}},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" domNodes = "),t("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".prototype.slice.call("),t("span",{staticClass:"hljs-built_in"},[s._v("document")]),s._v(".getElementsByTagName("),t("span",{staticClass:"hljs-string"},[s._v('"*"')]),s._v("));")])]),s._v("\n                这样domNodes就可以应用Array下的所有方法了。\n            ")]),s._v(" "),t("h4",[s._v("异同")]),s._v(" "),t("p",[s._v("\n                相同点："),t("br"),s._v("\n                都能够改变方法的执行上下文（执行环境），将一个对象的方法交给另一个对象来执行，并且是立即执行。\n            ")]),s._v(" "),t("p",[s._v("\n                不同点："),t("br"),s._v("\n                call方法从第二个参数开始可以接收任意个参数，每个参数会映射到相应位置的func的参数上，可以通过参数名调用，但是如果将所有的参数作为数组传入，它们会作为一个整体映射到func对应的第一个参数上，之后参数都为空。\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[s._v("function "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("func")]),s._v(" "),t("span",{staticClass:"hljs-params"},[s._v("(a,b,"),t("span",{staticClass:"hljs-built_in"},[s._v("c")]),s._v(")")])]),s._v(" {}"),t("br"),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("func")]),s._v("."),t("span",{staticClass:"hljs-title"},[s._v("call")]),t("span",{staticClass:"hljs-params"},[s._v("(obj, "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(")")])]),t("br"),t("span",{staticClass:"hljs-comment"},[s._v("// function接收到的参数实际上是 1,2,3")]),t("br"),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("func")]),s._v("."),t("span",{staticClass:"hljs-title"},[s._v("call")]),t("span",{staticClass:"hljs-params"},[s._v("(obj, ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("])")])]),t("br"),t("span",{staticClass:"hljs-comment"},[s._v("// function接收到的参数实际上是 [1,2,3],undefined,undefined")])])])]),s._v(" "),t("p",[s._v("\n                apply方法最多只有两个参数，第二个参数接收数组或者类数组，但是都会被转换成类数组传入func中，并且会被映射到func对应的参数上。\n                "),t("pre",{staticClass:"hljs swift"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("func")]),s._v("."),t("span",{staticClass:"hljs-title"},[s._v("apply")]),t("span",{staticClass:"hljs-params"},[s._v("(obj, ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("])")])]),t("br"),t("span",{staticClass:"hljs-comment"},[s._v("// function接收到的参数实际上是 1,2,3")]),t("br"),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("func")]),s._v("."),t("span",{staticClass:"hljs-title"},[s._v("apply")]),t("span",{staticClass:"hljs-params"},[s._v("(obj, {")])]),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("    "),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(",")])]),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("    "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(",")])]),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("    "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(",")])]),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("    length: "),t("span",{staticClass:"hljs-number"},[s._v("3")])])]),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("})")])]),t("br"),t("span",{staticClass:"hljs-comment"},[s._v("// function接收到的参数实际上是 1,2,3")])])])]),s._v(" "),t("h2",[s._v("用途")]),s._v(" "),t("h4",[s._v("对象继承")]),s._v(" "),t("p",[s._v("\n                call 和 apply 经常用于对象的继承。如下面这个例子：\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("superClass")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".a = "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(";"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".print = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("        "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".a);"),t("br"),s._v("   }"),t("br"),s._v("}"),t("br"),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("subClass")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("    superClass.call("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(");"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".print();"),t("br"),s._v("}"),t("br"),t("br"),s._v("subClass();"),t("br"),t("span",{staticClass:"hljs-comment"},[s._v("// 1")])])]),s._v("\n                subClass通过call方法，继承了superClass的print方法和a变量，同时subClass还可以扩展自己的其他方法。\n            ")]),s._v(" "),t("h4",[s._v("apply的一些妙用")]),s._v(" "),t("p",[t("strong",[s._v("Math.max")]),s._v("，可以实现得到数组中最大的一项。\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{staticStyle:{"word-break":"break-word","white-space":"initial"}},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("max")]),s._v(" = Math."),t("span",{staticClass:"hljs-keyword"},[s._v("max")]),s._v(".apply("),t("span",{staticClass:"hljs-built_in"},[s._v("null")]),s._v(", "),t("span",{staticClass:"hljs-built_in"},[s._v("array")]),s._v(");")])])]),s._v(" "),t("p",[s._v("\n                同理，"),t("strong",[s._v("Math.min")]),s._v("的写法："),t("br"),s._v(" "),t("pre",{staticClass:"hljs javascript"},[t("code",{staticStyle:{"word-break":"break-word","white-space":"initial"}},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("min")]),s._v(" = Math."),t("span",{staticClass:"hljs-keyword"},[s._v("min")]),s._v(".apply("),t("span",{staticClass:"hljs-built_in"},[s._v("null")]),s._v(", "),t("span",{staticClass:"hljs-built_in"},[s._v("array")]),s._v(");")])])]),s._v(" "),t("p",[s._v("\n                Array.prototype.push 可以实现两个数组合并。\n                "),t("pre",{staticClass:"hljs javascript"},[t("code",{},[s._v("let arr1 = ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("];"),t("br"),s._v("let arr2 = ["),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("6")]),s._v("];"),t("br"),t("br"),s._v("Array.prototype.push.apply(arr1, arr2);"),t("br"),s._v("console.log(arr1); "),t("span",{staticClass:"hljs-comment"},[s._v("// [1, 2, 3, 4, 5, 6]")])])])]),s._v(" "),t("h4",[s._v("call的重要用法")]),s._v(" "),t("p",[s._v("\n                可以用来代替另一个对象调用一个方法。\n                "),t("pre",{staticClass:"hljs perl"},[t("code",{},[s._v("function add (a, b) {"),t("br"),s._v("    console.log(a + b);"),t("br"),s._v("}"),t("br"),t("br"),s._v("function "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("sub")]),s._v(" ("),t("span",{staticClass:"hljs-title"},[s._v("a")]),s._v(", "),t("span",{staticClass:"hljs-title"},[s._v("b")]),s._v(") ")]),s._v("{"),t("br"),s._v("    console.log(a - b);"),t("br"),s._v("}"),t("br"),t("br"),s._v("add.call("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("sub")]),s._v(", 3, 1)")]),s._v(";")])]),s._v("\n                这个例子中的意思就是用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：4"),t("br"),s._v("\n                注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。\n            ")]),s._v(" "),t("p",[t("pre",{staticClass:"hljs javascript"},[t("code",{},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Class1")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name = "),t("span",{staticClass:"hljs-string"},[s._v("'class1'")]),s._v(";"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".showName = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("        alert("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name);"),t("br"),s._v("    }"),t("br"),s._v("}"),t("br"),t("br"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("Class2")]),s._v(" ("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".name = "),t("span",{staticClass:"hljs-string"},[s._v("'class2'")]),s._v(";"),t("br"),s._v("}"),t("br"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" c1 = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Class1();"),t("br"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" c2 = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Class2();"),t("br"),t("br"),s._v("c1.showNam.call(c2);")])]),s._v('\n                这里的意思是把 c1 的方法放到c2上执行，原来c2是没有showNam() 方法，现在是把c1 的showNam()方法放到 c2 上来执行，所以this.name 应该是 class2，执行的结果就是 ：alert（"class2"）; 可以让a对象来执行b对象的方法。\n            ')]),s._v(" "),t("h2",[s._v("便捷记忆法")]),s._v(" "),t("p",[s._v("\n                知乎上看到的小例子，很好记：\n            ")]),s._v(" "),t("p",[s._v("\n                猫吃鱼，狗吃肉，奥特曼打小怪兽。"),t("br"),s._v("\n                有天狗想吃鱼了"),t("br"),s._v("\n                猫.吃鱼.call(狗，鱼)"),t("br"),s._v("\n                狗就吃到鱼了"),t("br"),s._v("\n                猫成精了，想打怪兽"),t("br"),s._v("\n                奥特曼.打小怪兽.call(猫，小怪兽)"),t("br"),s._v("\n                猫也可以打小怪兽了\n            ")]),s._v(" "),t("h2",[s._v("bind的使用")]),s._v(" "),t("p",[t("ul",[t("li",[s._v("\n                        基本用法："),t("code",[s._v("obj.bind(thisObj, arg1, arg2, …);")])]),s._v(" "),t("li",[s._v("\n                        把 obj 绑定到 thisObj，这时候 thisObj 具备了 obj 的属性和方法。\n                    ")]),s._v(" "),t("li",[s._v("\n                        与 call 和 apply 不同的是，"),t("strong",[s._v("bind 绑定后不会立即执行")]),s._v("。\n                    ")])]),s._v(" "),t("pre",{staticClass:"hljs perl"},[t("code",{},[s._v("function add(j, k) {"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" j+k;"),t("br"),s._v("}"),t("br"),t("br"),s._v("function "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("sub")]),s._v("("),t("span",{staticClass:"hljs-title"},[s._v("j")]),s._v(", "),t("span",{staticClass:"hljs-title"},[s._v("k")]),s._v(") ")]),s._v("{"),t("br"),s._v("    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" j-k;"),t("br"),s._v("}"),t("br"),t("br"),s._v("add.bind("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("sub")]),s._v(", 5, 3)")]),s._v("; // 不再返回"),t("span",{staticClass:"hljs-number"},[s._v("8")]),t("br"),s._v("add.bind("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("sub")]),s._v(", 5, 3)")]),s._v("(); // "),t("span",{staticClass:"hljs-number"},[s._v("8")])])]),s._v("\n                如果 bind 的第一个参数是 null 或者 undefined，this 就指向全局对象。\n            ")])])])],1)},[],!1,null,null,null);v.options.__file="call-and-apply-and-bind.vue";a.default=v.exports}}]);