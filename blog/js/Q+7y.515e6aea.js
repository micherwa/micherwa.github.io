(window.webpackJsonp=window.webpackJsonp||[]).push([["Q+7y"],{"Q+7y":function(v,_,n){"use strict";n.r(_);var t={created:function(){}},l=n("psIG"),e=Object(l.a)(t,function(){var v=this,_=v.$createElement,n=v._self._c||_;return n("div",{staticClass:"blog-container"},[n("BlogHeader",{attrs:{title:"前端面试题——计算机相关",subTitle:"",date:"2018-09-14",tags:["面试题"]}}),v._v(" "),n("BlogContent",{attrs:{useCatalog:!0}},[n("div",{attrs:{slot:"content"},slot:"content"},[n("h2",[v._v("请描述一下渐进增强和优雅降级之间的差异")]),v._v(" "),n("p",[v._v("\n                定义：\n                "),n("ul",[n("li",[v._v("优雅降级：一开始就构建站点的完整功能，然后针对各浏览器进行测试和修复")]),v._v(" "),n("li",[v._v("渐进增强： 一开始只构建站点的最少特性，然后不断针对各浏览器追加功能")])]),v._v("\n                都关注于同一网站在不同设备里不同浏览器下的表现程度"),n("br"),v._v("\n                区别：\n                "),n("ul",[n("li",[v._v("“优雅降级”认为：应该针对那些最高级、最完善的浏览器来设计网站. 而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。")]),v._v(" "),n("li",[v._v("“渐进增强”认为：应关注于内容本身。请注意其中的差别：我甚至连“浏览器”三个字都没提。")])]),v._v("\n                理解：\n                "),n("ul",[n("li",[v._v("“优雅降级”就是首先完整地实现整个网站，包括其中的功能和效果。然后再为那些无法支持所有功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。")])])]),v._v(" "),n("h2",[v._v("如何对网站的文件和资源进行优化")]),v._v(" "),n("p",[n("ul",[n("li",[v._v("\n                        文件合并："),n("br"),v._v("\n                        减少对资源的请求数量。比如将多个图片拼成一张，然后通过background-position属性来加载背景图。"),n("strong",[v._v("每个http请求都会产生一次从你的浏览器到服务器端网络往返过程，并且导致推迟到达服务器端和返回浏览器端的时间，我们称之为延迟。")])]),v._v(" "),n("li",[v._v("\n                        文件压缩："),n("br"),v._v(" "),n("strong",[v._v("在服务器中对各资源进行压缩，发到客户端后再解压")]),v._v("，这样在网络上传输的数据量就会大幅减小。通常在服务器上配置apache或nginx的gzip。不过，这个设置会略微增加服务器的负担。建议服务器性能不是很好的网站，要慎重考虑。\n                    ")]),v._v(" "),n("li",[v._v("\n                        使用 CDN 托管："),n("br"),v._v("\n                        CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。\n                    ")]),v._v(" "),n("li",[v._v("\n                        使用浏览器缓存："),n("br"),v._v("\n                        浏览器会默认缓存首次载入的资源，以便之后的访问效率能更快。不过，为了能及时更新资源，一般会给资源加后缀(如：xxx.s3odf4.js)，当后缀发生变化时，浏览器则重新下载新的资源。\n                    ")]),v._v(" "),n("li",[v._v("\n                        在服务器端配置control-cache  last-modify-date\n                    ")]),v._v(" "),n("li",[v._v("\n                        在服务器配置Entity-Tag  if-none-match\n                    ")]),v._v(" "),n("li",[v._v("\n                        将资源放在多个域名下："),n("br"),v._v("\n                        以chrome浏览器为例，加载资源时请求同一个域名下的资源上限为6个，所以这样做可以同时请求更多的资源。已经有很多网站这么做了。\n                    ")]),v._v(" "),n("li",[v._v("\n                        图片延迟加载："),n("br"),v._v("\n                        很多电商网站、新闻网站，尤其是用到瀑布流展示图片的时候，都已经这么做了。\n                    ")]),v._v(" "),n("li",[v._v("\n                        代码书写时的注意点：\n                        "),n("ol",[n("li",[v._v("\n                                css文件放置在head，js放置在文档尾。\n                            ")]),v._v(" "),n("li",[v._v("\n                                在写css时，"),n("strong",[v._v("将可以合并的样式合并起来")]),v._v("，比如margin-top、margin-bottom等。"),n("strong",[v._v("给img图片设置宽高")]),v._v("，因为浏览器渲染元素的时候没有找到这两个参数，需要一边下载图片一边计算大小，这不但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。\n                            ")]),v._v(" "),n("li",[v._v("\n                                在写js时，少改变DOM元素，少触发reflow，可以复用的代码提出来写成公共的等。\n                            ")]),v._v(" "),n("li",[v._v("\n                                对img做优化，在不失真的情况下尽量减少图片大小，小图标使用iconfont等。\n                            ")])])])])]),v._v(" "),n("h2",[v._v("重绘和回流的区别与关系，以及如何对其进行最小化？")]),v._v(" "),n("p",[n("ul",[n("li",[n("strong",[v._v("重绘(repaint)")]),v._v("：当渲染树中的元素外观（如：颜色）发生改变，不影响布局时，产生重绘\n                    ")]),v._v(" "),n("li",[n("strong",[v._v("回流(reflow)")]),v._v("：当渲染树中的元素的布局（如：尺寸、位置、隐藏/状态状态）发生改变时，产生重绘回流\n                    ")]),v._v(" "),n("li",[n("strong",[v._v("区别")]),v._v("：回流必将引起重绘，而重绘不一定会引起回流。JS获取Layout属性值（如：offsetLeft、scrollTop、getComputedStyle等）也会引起回流。因为浏览器需要通过回流计算最新值\n                    ")]),v._v(" "),n("li",[n("strong",[v._v("最小化重绘和回流")]),v._v("：\n                        "),n("ol",[n("li",[v._v('需要对元素进行复杂的操作时，可以先隐藏(display:"none")，完成后再显示')]),v._v(" "),n("li",[v._v("需要创建多个DOM节点时，使用DocumentFragment创建完后一次性的加入document")]),v._v(" "),n("li",[v._v("缓存Layout属性值，如：let left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流")]),v._v(" "),n("li",[v._v("尽量避免用table布局（table元素一旦触发回流就会导致table里所有的其它元素回流）")]),v._v(" "),n("li",[v._v("避免使用css表达式(expression)，因为每次调用都会重新计算值（包括加载页面）")]),v._v(" "),n("li",[v._v("尽量使用 css 属性简写，如：用 border 代替 border-width, border-style, border-color")]),v._v(" "),n("li",[v._v("尽量少在html中添加style属性，定义css的class来代替")])])])])]),v._v(" "),n("h2",[v._v("进程和线程的区别")]),v._v(" "),n("p",[n("ul",[n("li",[v._v("一个程序至少有一个进程,一个进程至少有一个线程。")]),v._v(" "),n("li",[v._v("线程的划分尺度小于进程，使得多线程程序的并发性高。")]),v._v(" "),n("li",[v._v("线程是独立调度的基本单位, 进程是拥有资源的基本单位。")]),v._v(" "),n("li",[v._v("进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。")]),v._v(" "),n("li",[v._v("\n                        线程在执行过程中与进程的区别：\n                        "),n("ol",[n("li",[v._v("每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。")]),v._v(" "),n("li",[v._v("但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。")]),v._v(" "),n("li",[v._v("从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。")])])])])])])])],1)},[],!1,null,null,null);e.options.__file="fe-interview-related-to-computer.vue";_.default=e.exports}}]);